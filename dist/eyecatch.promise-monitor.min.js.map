{"version":3,"sources":["eyecatch.promise-monitor.min.js"],"names":["angular","module","provider","this","$get","$q","PromiseMonitor","options","monitored","self","isActive","updateActive","length","addPromise","promise","deferred","defer","push","then","splice","indexOf","value","resolve","reject","destroy","cancel","i","create","config","$httpProvider","interceptors","request","monitor","isArray","$promiseMonitorDeferred","forEach","when","response","responseError"],"mappings":";;;;;;;CAOA,WACIA,QAAQC,OAAO,+BAAgCC,SAAS,iBAAkB,WAmEtE,MAlEAC,MAAKC,MAAQ,KAAM,SAAUC;;AAEzB,QAASC,GAAeC,GACpB,GAAIC,MACAC,EAAON;;AAGXM,EAAKF,QAAUA,MACfE,EAAKC,UAAW,CAEhB,IAAIC,GAAe,WACfF,EAAKC,SAAWF,EAAUI,OAAS,EA6CvC,OA1CAH,GAAKI,WAAa,SAAUC,GACxB,GAAIC,GAAWV,EAAGW;;AA4BlB,MA3BAR,GAAUS,KAAKF,GAEfJ,IAEAI,EAASD,QAAQI,KAAK,WAClBV,EAAUW,OAAOX,EAAUY,QAAQL,GAAW,GAE9CJ,KACD,WACCH,EAAUW,OAAOX,EAAUY,QAAQL,GAAW,GAE9CJ,MAIAG,GACAA,EAAQI,KAAK,SAAUG,GAGnB,MAFAN,GAASO,QAAQD,GAEVA,GACR,SAAUA,GAGT,MAFAN,GAASQ,OAAOF,GAEThB,EAAGkB,OAAOF,KAIlBN,GAGXN,EAAKe,QAAUf,EAAKgB,OAAS;;AAEzB,IAAK,GAAIC,GAAIlB,EAAUI,OAAS,EAAGc,GAAK,EAAGA,IACvClB,EAAUkB,GAAGJ;;AAIjBd,MAGGC,EAGX,OACIkB,OAAQ,SAAUpB,GACd,MAAO,IAAID,GAAeC,OAK/BJ;;;;;;;AAWf,WACIH,QAAQC,OAAO,4BAA4B2B,QAAQ,gBAAiB,SAAUC,GAC1EA,EAAcC,aAAab,MAAM,KAAM,SAASZ,GAC5C,OACI0B,QAAS,SAAUH;;;;AAgBf,MAdIA,GAAOI,UAEFhC,QAAQiC,QAAQL,EAAOI,WACxBJ,EAAOI,SAAWJ,EAAOI,UAG7BJ,EAAOM,wBAA0BN,EAAOM,4BAGxClC,QAAQmC,QAAQP,EAAOI,QAAS,SAAUA,GACtCJ,EAAOM,wBAAwBjB,KAAKe,EAAQnB,iBAI7CR,EAAG+B,KAAKR,IAEnBS,SAAU,SAAUA;;AAQhB,MANIA,GAAST,QAAUS,EAAST,OAAOM,yBACnClC,QAAQmC,QAAQE,EAAST,OAAOM,wBAAyB,SAAUnB,GAC/DA,EAASO,QAAQe,KAIlBhC,EAAG+B,KAAKC,IAEnBC,cAAe,SAAUD;;AAQrB,MANIA,GAAST,QAAUS,EAAST,OAAOM,yBACnClC,QAAQmC,QAAQE,EAAST,OAAOM,wBAAyB,SAAUnB,GAC/DA,EAASQ,OAAOc,KAIjBhC,EAAGkB,OAAOc","file":"eyecatch.promise-monitor.min.js","sourcesContent":["/**\n * eyecatch-promise-monitor - An Angular module for monitoring promises\n * @version v1.0.0\n * @author Ove Andersen <ove.andersen@outlook.com>\n * @link https://github.com/azzlack/angular-promise-monitor\n * @license Apache-2.0\n */\n(function () {\r\n    angular.module('eyecatch.promise-monitor', []).provider('promiseMonitor', function () {\r\n        this.$get = ['$q', function ($q) {\r\n            // ReSharper disable once InconsistentNaming\r\n            function PromiseMonitor(options) {\r\n                var monitored = [];\r\n                var self = this;\r\n\r\n                // Set default options if necessary\r\n                self.options = options || {};\r\n                self.isActive = false;\r\n\r\n                var updateActive = function () {\r\n                    self.isActive = monitored.length > 0;\r\n                };\r\n\r\n                self.addPromise = function (promise) {\r\n                    var deferred = $q.defer();\r\n                    monitored.push(deferred);\r\n\r\n                    updateActive();\r\n\r\n                    deferred.promise.then(function () {\r\n                        monitored.splice(monitored.indexOf(deferred), 1);\r\n\r\n                        updateActive();\r\n                    }, function () {\r\n                        monitored.splice(monitored.indexOf(deferred), 1);\r\n\r\n                        updateActive();\r\n                    });\r\n\r\n                    // Resolve deferred when promise has completed\r\n                    if (promise) {\r\n                        promise.then(function (value) {\r\n                            deferred.resolve(value);\r\n\r\n                            return value;\r\n                        }, function (value) {\r\n                            deferred.reject(value);\r\n\r\n                            return $q.reject(value);\r\n                        });\r\n                    }\r\n\r\n                    return deferred;\r\n                };\r\n\r\n                self.destroy = self.cancel = function () {\r\n                    // Resolve all promises\r\n                    for (var i = monitored.length - 1; i >= 0; i--) {\r\n                        monitored[i].resolve();\r\n                    }\r\n\r\n                    // Reset monitored list\r\n                    monitored = [];\r\n                };\r\n\r\n                return self;\r\n            }\r\n\r\n            return {\r\n                create: function (options) {\r\n                    return new PromiseMonitor(options);\r\n                }\r\n            };\r\n        }];\r\n\r\n        return this;\r\n    });\r\n})();\r\n\n/**\n * eyecatch-promise-monitor - An Angular module for monitoring promises\n * @version v1.0.0\n * @author Ove Andersen <ove.andersen@outlook.com>\n * @link https://github.com/azzlack/angular-promise-monitor\n * @license Apache-2.0\n */\n(function () {\r\n    angular.module('eyecatch.promise-monitor').config(['$httpProvider', function ($httpProvider) {\r\n        $httpProvider.interceptors.push(['$q', function($q) {\r\n            return {\r\n                request: function (config) {\r\n                    // TODO: handle cached responses\r\n                    if (config.monitor) {\r\n                        // Convert to array to simplify handling\r\n                        if (!angular.isArray(config.monitor)) {\r\n                            config.monitor = [config.monitor];\r\n                        }\r\n\r\n                        config.$promiseMonitorDeferred = config.$promiseMonitorDeferred || [];\r\n\r\n                        // Create promises for each monitor\r\n                        angular.forEach(config.monitor, function (monitor) {\r\n                            config.$promiseMonitorDeferred.push(monitor.addPromise());\r\n                        });\r\n                    }\r\n\r\n                    return $q.when(config);\r\n                },\r\n                response: function (response) {\r\n                    // TODO: handle cached responses\r\n                    if (response.config && response.config.$promiseMonitorDeferred) {\r\n                        angular.forEach(response.config.$promiseMonitorDeferred, function (deferred) {\r\n                            deferred.resolve(response);\r\n                        });\r\n                    }\r\n\r\n                    return $q.when(response);\r\n                },\r\n                responseError: function (response) {\r\n                    // TODO: handle cached responses\r\n                    if (response.config && response.config.$promiseMonitorDeferred) {\r\n                        angular.forEach(response.config.$promiseMonitorDeferred, function (deferred) {\r\n                            deferred.reject(response);\r\n                        });\r\n                    }\r\n\r\n                    return $q.reject(response);\r\n                }\r\n            };\r\n        }]);\r\n    }]);\r\n})();\r\n"],"sourceRoot":"/source/"}