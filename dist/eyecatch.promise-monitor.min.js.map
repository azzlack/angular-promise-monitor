{"version":3,"sources":["eyecatch.promise-monitor.min.js"],"names":["angular","module","provider","this","$get","$q","promiseMonitor","options","monitored","self","active","updateActive","length","addPromise","promise","deferred","defer","push","then","splice","indexOf","value","resolve","reject","destroy","cancel","i","create","factory","monitorRequest","request","config","monitor","isArray","$promiseMonitorDeferred","forEach","when","response","responseError","$httpProvider","interceptors"],"mappings":"CAKA,WACIA,QAAQC,OAAO,+BAAgCC,SAAS,iBAAkB,WACtEC,KAAKC,MAAQ,KAAM,SAAUC,GACzB,QAASC,GAAeC,GACpB,GAAIC,MACAC,EAAON,IAGXM,GAAKF,QAAUA,MACfE,EAAKC,QAAS,CAEd,IAAIC,GAAe,WACfF,EAAKC,OAASF,EAAUI,OAAS,EAGrCH,GAAKI,WAAa,SAASC,GACvB,GAAIC,GAAWV,EAAGW,OA0BlB,OAzBAR,GAAUS,KAAKF,GAEfA,EAASD,QAAQI,KAAK,WAClBV,EAAUW,OAAOX,EAAUY,QAAQL,GAAW,GAE9CJ,KACD,WACCH,EAAUW,OAAOX,EAAUY,QAAQL,GAAW,GAE9CJ,MAIAG,GACAA,EAAQI,KAAK,SAAUG,GAGnB,MAFAN,GAASO,QAAQD,GAEVA,GACR,SAAUA,GAGT,MAFAN,GAASQ,OAAOF,GAEThB,EAAGkB,OAAOF,KAIlBN,GAGXN,EAAKe,QAAUf,EAAKgB,OAAS,WAEzB,IAAK,GAAIC,GAAIlB,EAAUI,OAAS,EAAGc,GAAK,EAAGA,IACvClB,EAAUkB,GAAGJ,SAIjBd,OAIR,OACImB,OAAQ,SAASpB,GACb,MAAO,IAAID,GAAeC,YAY7C,WACGP,QAAQC,OAAO,+BAAgC2B,QAAQ,mBAAoB,KAAM,SAASvB,GACtF,GAAIwB,IACAC,QAAS,SAASC,GAgBf,MAdIA,GAAOC,UAEFhC,QAAQiC,QAAQF,EAAOC,WACxBD,EAAOC,SAAWD,EAAOC,UAG7BD,EAAOG,wBAA0BH,EAAOG,4BAGxClC,QAAQmC,QAAQJ,EAAOC,QAAS,SAAUA,GACtCD,EAAOG,wBAAwBjB,KAAKe,EAAQnB,iBAI7CR,EAAG+B,KAAKL,IAElBM,SAAU,SAAUA,GAQjB,MANIA,GAASN,QAAUM,EAASN,OAAOG,yBACnClC,QAAQmC,QAAQE,EAASN,OAAOG,wBAAyB,SAAUnB,GAC/DA,EAASO,QAAQe,KAIlBhC,EAAG+B,KAAKC,IAElBC,cAAe,SAAUD,GAQrB,MANIA,GAASN,QAAUM,EAASN,OAAOG,yBACnClC,QAAQmC,QAAQE,EAASN,OAAOG,wBAAyB,SAAUnB,GAC/DA,EAASQ,OAAOc,KAIjBhC,EAAGkB,OAAOc,IAI1B,OAAOR,MAGV7B,QAAQC,OAAO,+BAAgC8B,QAAQ,gBAAiB,SAAUQ,GAC9EA,EAAcC,aAAavB,KAAK","file":"eyecatch.promise-monitor.min.js","sourcesContent":["/*\r\n * eyecatch.promise-monitor - v1.0.0\r\n * file: promise-monitor.js\r\n */\r\n\r\n(function () {\r\n    angular.module('eyecatch.promise-monitor', []).provider('promiseMonitor', function () {\r\n        this.$get = ['$q', function ($q) {\r\n            function promiseMonitor(options) {\r\n                var monitored = [];\r\n                var self = this;\r\n\r\n                // Set default options if necessary\r\n                self.options = options || {};\r\n                self.active = false;\r\n\r\n                var updateActive = function() {\r\n                    self.active = monitored.length > 0;\r\n                };\r\n\r\n                self.addPromise = function(promise) {\r\n                    var deferred = $q.defer();\r\n                    monitored.push(deferred);\r\n\r\n                    deferred.promise.then(function() {\r\n                        monitored.splice(monitored.indexOf(deferred), 1);\r\n\r\n                        updateActive();\r\n                    }, function() {\r\n                        monitored.splice(monitored.indexOf(deferred), 1);\r\n\r\n                        updateActive();\r\n                    });\r\n\r\n                    // Resolve deferred when promise has completed\r\n                    if (promise) {\r\n                        promise.then(function (value) {\r\n                            deferred.resolve(value);\r\n\r\n                            return value;\r\n                        }, function (value) {\r\n                            deferred.reject(value);\r\n\r\n                            return $q.reject(value);\r\n                        });\r\n                    }\r\n\r\n                    return deferred;\r\n                };\r\n\r\n                self.destroy = self.cancel = function () {\r\n                    // Resolve all promises\r\n                    for (var i = monitored.length - 1; i >= 0; i--) {\r\n                        monitored[i].resolve();\r\n                    }\r\n\r\n                    // Reset monitored list\r\n                    monitored = [];\r\n                };\r\n            }\r\n\r\n            return {\r\n                create: function(options) {\r\n                    return new promiseMonitor(options);\r\n                }\r\n            };\r\n        }];\r\n    });\r\n})();\r\n\n/*\r\n * eyecatch.promise-monitor - v1.0.0\r\n * file: http-interceptor.js\r\n */\r\n\r\n (function () {\r\n    angular.module('eyecatch.promise-monitor', []).factory('monitorInjector', ['$q', function($q) {\r\n        var monitorRequest = {\r\n            request: function(config) {\r\n                // TODO: handle cached responses\r\n               if (config.monitor) {\r\n                   // Convert to array to simplify handling\r\n                   if (!angular.isArray(config.monitor)) {\r\n                       config.monitor = [config.monitor];\r\n                   }\r\n\r\n                   config.$promiseMonitorDeferred = config.$promiseMonitorDeferred || [];\r\n\r\n                   // Create promises for each monitor\r\n                   angular.forEach(config.monitor, function (monitor) {\r\n                       config.$promiseMonitorDeferred.push(monitor.addPromise());\r\n                   });\r\n               }\r\n\r\n               return $q.when(config);\r\n            },\r\n            response: function (response) {\r\n               // TODO: handle cached responses\r\n               if (response.config && response.config.$promiseMonitorDeferred) {\r\n                   angular.forEach(response.config.$promiseMonitorDeferred, function (deferred) {\r\n                       deferred.resolve(response);\r\n                   });\r\n               }\r\n\r\n               return $q.when(response);\r\n            },\r\n            responseError: function (response) {\r\n               // TODO: handle cached responses\r\n                if (response.config && response.config.$promiseMonitorDeferred) {\r\n                    angular.forEach(response.config.$promiseMonitorDeferred, function (deferred) {\r\n                        deferred.reject(response);\r\n                    });\r\n                }\r\n\r\n                return $q.reject(response);\r\n            }\r\n       };\r\n\r\n       return monitorRequest;\r\n    }]);\r\n\r\n    angular.module('eyecatch.promise-monitor', []).config(['$httpProvider', function ($httpProvider) {\r\n        $httpProvider.interceptors.push('monitorInjector');\r\n    }]);\r\n})();\r\n"],"sourceRoot":"/source/"}